name: Build Go Binaries

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release Tag (e.g., 0.1.0)'
        required: true
        default: '1.'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
          - arch: 386
            filename: i386
          - arch: arm
            goarm: 5
          - arch: arm
            goarm: 6
          - arch: arm
            goarm: 7
          - arch: arm64
          - arch: mips
          - arch: mipsle
          - arch: mips64
          - arch: mips64le
          - arch: riscv64
          - arch: amd64
            goos: windows
          - arch: 386
            goos: windows

    name: Build for ${{ matrix.goos || 'linux' }}-${{ matrix.arch }}${{ matrix.goarm && format(' (GOARM={0})', matrix.goarm) || '' }}

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
          
      - name: Build Binary with Cross-Compilation Container
        uses: docker://ghcr.io/goreleaser/goreleaser:latest # Or another suitable cross-compilation image
        with:
          entrypoint: /bin/bash
          args: |
            -c "
            set -euo pipefail
            mkdir -p build
            GOOS=${{ matrix.goos || 'linux' }}
            GOARCH=${{ matrix.arch }}
            GOARM=${{ matrix.goarm || '' }}
            CGO_ENABLED=1 # Enable CGO for all builds within the container
            if [[ \"$GOARCH\" == \"386\" && \"$GOOS\" == \"windows\" ]]; then
              OUTPUT_FILE=\"livetv-windows-i386.exe\"
            elif [[ \"$GOARCH\" == \"amd64\" && \"$GOOS\" == \"windows\" ]]; then
              OUTPUT_FILE=\"livetv-windows-amd64.exe\"
            elif [[ \"$GOARCH\" == \"386\" ]]; then
              OUTPUT_FILE=\"livetv-linux-i386\"
            elif [[ \"$GOARCH\" == \"arm\" ]]; then
              OUTPUT_FILE=\"livetv-linux-armv${GOARM}\"
            else
              OUTPUT_FILE=\"livetv-linux-${GOARCH}\"
            fi
            echo \"Building for $GOOS/$GOARCH with GOARM=$GOARM and CGO_ENABLED=$CGO_ENABLED\"
            # The Docker image should have the necessary cross-toolchains and libraries pre-configured
            # You might need to adjust CGO_CFLAGS and CGO_LDFLAGS depending on the image
            GOOS=$GOOS GOARCH=$GOARCH GOARM=$GOARM CGO_ENABLED=$CGO_ENABLED \
            go build -buildvcs=false -ldflags=\"-s -w\" -o build/$OUTPUT_FILE
            "

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          files: build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup Old Workflow Runs
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 0
